<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chris-rock</title>
    <atom:link href="http://chris-rock.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://chris-rock.github.io</link>
    <description>fun &amp; sun</description>
    <pubDate>Sun, 07 Sep 2014 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>s3cmd with radosgw</title>
      <link>http://chris-rock.github.io/articles/s3cmd-with-radosgw/</link>
      <pubDate>Sun, 07 Sep 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/s3cmd-with-radosgw/</guid>
      <author></author>
      <description>&lt;p&gt;Amazon introduced the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Amazon_S3&quot;&gt;S3&lt;/a&gt; object storage to a wide-range of users. Their interface is the defacto-standard to store files in web applications. Nowadays, it is used by other vendors as well. &lt;a href=&quot;http://ceph.com/&quot;&gt;Ceph&lt;/a&gt; and &lt;a href=&quot;http://basho.com/riak-cloud-storage/&quot;&gt;RiakCS&lt;/a&gt; are some examples, where the same interface is available. This blog post will setup s3cmd with Ceph radosgw.&lt;/p&gt;
&lt;h2 id=&quot;about-s3&quot;&gt;About S3&lt;/h2&gt;
&lt;p&gt;It is used as an interface for distributed storage due to the fact that the only thing you need to put and retrieve files is http. It is very handy to have a clear interface to manage files across different machines. For example you may want to backup your local files to a s3 cluster. This requires a toolset that enables you to easily store and retrieve s3 files from command line. &lt;a href=&quot;http://s3tools.org/s3cmd&quot;&gt;s3cmd&lt;/a&gt; is a great tool for just that. Out of the box it works with Amazon S3, but can be easily configured with &lt;a href=&quot;http://ceph.com/docs/master/man/8/radosgw/&quot;&gt;radosgw&lt;/a&gt;, which is commonly used in conjunction with &lt;a href=&quot;http://www.openstack.org/&quot;&gt;OpenStack&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Before we start implementing the base set, you need to install &lt;code&gt;s3cmd&lt;/code&gt; on you machine. &lt;/p&gt;
&lt;h3 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h3&gt;
&lt;p&gt;For Ubuntu you need to install the s3 repo before installing the package &lt;code&gt;s3cmd&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# install repo key&lt;/span&gt;
wget -O- -q http://s3tools.org/repo/deb-all/stable/s3tools.key | &lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; apt-key add -
&lt;span class=&quot;comment&quot;&gt;# install repo&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; wget -O/etc/apt/sources.list.d/s3tools.list http://s3tools.org/repo/deb-all/stable/s3tools.list
&lt;span class=&quot;comment&quot;&gt;# update package manager&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; apt-get update
&lt;span class=&quot;comment&quot;&gt;# install s3cmd&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; apt-get install s3cmd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;macos&quot;&gt;MacOS&lt;/h3&gt;
&lt;p&gt;On Mac you may use &lt;a href=&quot;http://brew.sh/&quot;&gt;brew&lt;/a&gt; to install s3cmd:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# install s3cmd
brew install s3cmd
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;basic-commands&quot;&gt;Basic Commands&lt;/h2&gt;
&lt;p&gt;S3 uses a different terminology, compared to posix filesystems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bucket: kind of directory&lt;/li&gt;
&lt;li&gt;object: similar to a file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although Amazon S3 allows you to create a &lt;code&gt;directory&lt;/code&gt; within a bucket, it will not be a real directory. In S3, a directory is more like a file prefix. Take this in consideration when you upload huge amounts of data.&lt;/p&gt;
&lt;p&gt;In general it is very efficient to use prefixes for searches instead of postfixes. E.g. if you look for file types, you may store your files as &lt;code&gt;txt.file&lt;/code&gt; instead of &lt;code&gt;file.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Basic commands for &lt;code&gt;s3cmd&lt;/code&gt; are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# S3cmd help&lt;/span&gt;
s3cmd --help

&lt;span class=&quot;comment&quot;&gt;# Display all buckets&lt;/span&gt;
s3cmd ls

&lt;span class=&quot;comment&quot;&gt;# Create new bucket&lt;/span&gt;
s3cmd mb s3://YOURBUCKET

&lt;span class=&quot;comment&quot;&gt;# Upload new file&lt;/span&gt;
s3cmd put test.txt s3://YOURBUCKET

&lt;span class=&quot;comment&quot;&gt;# Download file&lt;/span&gt;
s3cmd get s3://YOURBUCKET/test.txt test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;configuration-for-radosgw-&quot;&gt;Configuration for &lt;code&gt;radosgw&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Since &lt;code&gt;s3cmd&lt;/code&gt; is optimized for Amazon S3, you need to apply a few changes to convince &lt;code&gt;s3cmd&lt;/code&gt; to talk with &lt;code&gt;radosgw&lt;/code&gt;. At first we create a new configuration with s3cmd via interactive mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;s3cmd --configure -c s3test.cfg

Enter new values or accept defaults in brackets with Enter.
Refer to user manual for detailed description of all options.

Access key and Secret key are your identifiers for Amazon S3
Access Key: key
Secret Key: secret

Encryption password is used to protect your files from reading
by unauthorized persons while in transfer to S3
Encryption password: 
Path to GPG program [/usr/local/bin/gpg]: 

When using secure HTTPS protocol all communication with Amazon S3
servers is protected from 3rd party eavesdropping. This method is
slower than plain HTTP and can&amp;#39;t be used if you&amp;#39;re behind a proxy
Use HTTPS protocol [No]: yes

New settings:
  Access Key: key
  Secret Key: secret
  Encryption password: 
  Path to GPG program: /usr/local/bin/gpg
  Use HTTPS protocol: True
  HTTP Proxy server name: 
  HTTP Proxy server port: 0

Test access with supplied credentials? [Y/n] n

Save settings? [y/N] y
Configuration saved to &amp;#39;s3test.cfg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated configuration file will look similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;[default]
access_key = abc
bucket_location = US
cloudfront_host = cloudfront.amazonaws.com
cloudfront_resource = /2010-07-15/distribution
default_mime_type = binary/octet-stream
delete_removed = False
dry_run = False
encoding = UTF-8
encrypt = False
follow_symlinks = False
force = False
get_continue = False
gpg_command = /usr/local/bin/gpg
gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_passphrase =
guess_mime_type = True
host_base = s3.amazonaws.com
host_bucket = %(bucket)s.s3.amazonaws.com
human_readable_sizes = False
list_md5 = False
log_target_prefix =
preserve_attrs = True
progress_meter = True
proxy_host =
proxy_port = 0
recursive = False
recv_chunk = 4096
reduced_redundancy = False
secret_key = secret
send_chunk = 4096
simpledb_host = sdb.amazonaws.com
skip_existing = False
socket_timeout = 300
urlencoding_mode = normal
use_https = True
verbosity = WARNING
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards you may try to access your bucket with &lt;code&gt;s3cmd&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;s3cmd -c s3test.cfg ls
ERROR: S3 error: &lt;span class=&quot;number&quot;&gt;403&lt;/span&gt; (InvalidAccessKeyId): The AWS Access Key Id you provided does not exist &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; our records.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to adapt a few lines to configure s3cmd for radosgw. Currently &lt;code&gt;s3cmd&lt;/code&gt; does not know the radosgw hostname. Replace &lt;code&gt;host_base&lt;/code&gt; and &lt;code&gt;host_bucket&lt;/code&gt; with the hostname of the radosgw host:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;host_base = s3.amazonaws.com
host_bucket = %(bucket)s.s3.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;host_base = radosgw.example.com
host_bucket = %(bucket)s.radosgw.example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should be able to run &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;s3cmd -c s3test.cfg ls
2014-09-06 12:05  s3://YOURBUCKET
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sidenote: I had a few issues using lowercase bucket names with &lt;code&gt;radosgw&lt;/code&gt;. Uppercase buckets worked like a charm. &lt;/p&gt;
&lt;h2 id=&quot;encryption-with-gpg&quot;&gt;Encryption with gpg&lt;/h2&gt;
&lt;p&gt;If we talk about backups, we never want to store them unencrypted. &lt;code&gt;s3cmd&lt;/code&gt; supports &lt;a href=&quot;https://www.gnupg.org/&quot;&gt;gpg&lt;/a&gt;. The cool thing of using s3cmd in conjunction with gpg is the fact that it works completely transparent. Once configured, all files are automatically encrypted during upload and decrypted whenever you download a file.&lt;/p&gt;
&lt;p&gt;To activate encryption change the &lt;code&gt;s3cmd&lt;/code&gt; configuration file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;encrypt = True
gpg_command = gpg
gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_encrypt = %(gpg_command)s -c --cipher-algo AES256 --force-mdc --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_passphrase = longsecurepassphrase
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first you have to enable encryption with &lt;code&gt;encrypt = True&lt;/code&gt;. Although the default configuration uses &lt;code&gt;gpg_command = /usr/local/bin/gpg&lt;/code&gt;, I prefer to use &lt;code&gt;gpg_command = gpg&lt;/code&gt;. Now, you have to set &lt;code&gt;gpg&lt;/code&gt; in your system path, but on the other hand, the configuration works on Linux and Mac without any change. Additionally you want to ensure that gpg uses the right cipher. I prefer to set the cipher explicitly: &lt;code&gt;--cipher-algo AES256&lt;/code&gt;. Although default with AES256, the option &lt;code&gt;--force-mdc&lt;/code&gt; forces the use of encryption with a modification detection code.&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;s3cmd&lt;/code&gt; works with &lt;code&gt;radosgw&lt;/code&gt; and encryption.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$&amp;gt; cat &amp;gt; test.txt
samplecontent
$&amp;gt; s3cmd put test.txt s3://YOURBUCKET
test.txt -&amp;gt; s3://YOURBUCKET/test.txt  [1 of 1]
 4 of 4   100% in    0s     7.51 B/s  done
$&amp;gt; s3cmd get s3://YOURBUCKET/test.txt test2.txt
s3://YOURBUCKET/test.txt -&amp;gt; test2.txt  [1 of 1]
 4 of 4   100% in    0s     5.74 B/s  done
$&amp;gt; s3cmd del s3://YOURBUCKET/test.txt
File s3://YOURBUCKET/test.txt deleted
$&amp;gt; cat test2.txt 
samplecontent
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Encrypt and decrypt content with Nodejs</title>
      <link>http://chris-rock.github.io/articles/nodejs-encryption/</link>
      <pubDate>Tue, 02 Sep 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/nodejs-encryption/</guid>
      <author></author>
      <description>&lt;style type=&quot;text/css&quot;&gt;
.gist {
  font-size: 12px;
}
&lt;/style&gt;

&lt;p&gt;Nodejs offers great support for cryptography. Under the hood it uses openssl and ships with a &lt;a href=&quot;http://nodejs.org/api/crypto.html&quot;&gt;Javascript api&lt;/a&gt;. Unfortunately the api is not always as intuitive as it should be, especially when you have to deal with error codes. To make you life easier, I collected various approaches for encryption with AES 256. &lt;/p&gt;
&lt;h2 id=&quot;encryption-mode&quot;&gt;Encryption mode&lt;/h2&gt;
&lt;p&gt;The first decision is the AES encryption mode. Currently I recommend the &lt;a href=&quot;http://nodejs.org/api/crypto.html&quot;&gt;CTR mode&lt;/a&gt;. You may want to read &lt;a href=&quot;http://www.cs.ucdavis.edu/~rogaway/papers/modes.pdf&quot;&gt;Evaluation of Some Blockcipher Modes of Operation&lt;/a&gt; or &lt;a href=&quot;http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/ccm-ad1.pdf&quot;&gt;On the Security of CTR + CBC-MAC&lt;/a&gt;. The next nodejs version comes with support for &lt;a href=&quot;http://en.wikipedia.org/wiki/Galois/Counter_Mode&quot;&gt;GCM&lt;/a&gt; to do &lt;a href=&quot;http://en.wikipedia.org/wiki/Authenticated_encryption&quot;&gt;authenticated encryption&lt;/a&gt;. Until then you have to use approaches like Encrypt-then-MAC and combine the encryption with the generation of &lt;a href=&quot;/articles/nodejs-sha512/&quot;&gt;SHA hashs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&quot;encrypt-and-decrypt-text&quot;&gt;Encrypt and decrypt text&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/993d8a22c7138d1f0d2e.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;encrypt-and-decrypt-buffers&quot;&gt;Encrypt and decrypt buffers&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/6cac4e422f29c28c9d88.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;encrypt-and-decrypt-streams&quot;&gt;Encrypt and decrypt streams&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/335f92742b497256982a.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;use-gcm-for-authenticated-encryption&quot;&gt;Use GCM for authenticated encryption&lt;/h3&gt;
&lt;p&gt;If you replace &lt;code&gt;aes-256-ctr&lt;/code&gt; with &lt;code&gt;aes-256-gcm&lt;/code&gt; you may think everything works as expected. Unfortunately this will result with a confusing error message: &lt;code&gt;TypeError: error:00000000:lib(0):func(0):reason(0)&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Authenticated encryption includes a hash of the encrypted content and helps you to identify manipulated encrypted content.&lt;/p&gt;
&lt;p&gt;You need to set the &lt;a href=&quot;https://github.com/joyent/node/blob/857975d5e7e0d7bf38577db0478d9e5ede79922e/lib/crypto.js#L238-L245&quot;&gt;authentication tag&lt;/a&gt; via &lt;code&gt;decrypt.setAuthTag()&lt;/code&gt;, which is currently only available if you use &lt;code&gt;crypto.createCipheriv(algorithm, key, iv)&lt;/code&gt; with an &lt;a href=&quot;http://en.wikipedia.org/wiki/Initialization_vector&quot;&gt;initialization vector&lt;/a&gt;. GCM’s security is dependent on choosing a unique initialization vector for each encryption.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/fe87dd35d6168512a2f7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The new GCM mode is available in nodejs 0.11. Try it with &lt;a href=&quot;https://github.com/visionmedia/n&quot;&gt;n&lt;/a&gt; via&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g n
sudo n 0.11.13
n use 0.11.13 crypto-gcm.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also take a look at the &lt;a href=&quot;https://github.com/joyent/node/blob/master/test/simple/test-crypto-authenticated.js#L44-L64&quot;&gt;nodejs tests&lt;/a&gt; for more tests with different setups.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope the samples help you to get started with nodejs encryption.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Chef without an internet connection / Uninstall Chef with Chef</title>
      <link>http://chris-rock.github.io/articles/chef-without-internet/</link>
      <pubDate>Sun, 24  Aug 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/chef-without-internet/</guid>
      <author></author>
      <description>&lt;p&gt;Recently I had a discussion with a DevOps team about an installation of Chef without an internet connection. A normal chef bootstrap fetches the chef binaries via “curl -L &lt;a href=&quot;https://www.opscode.com/chef/install.sh&quot;&gt;https://www.opscode.com/chef/install.sh&lt;/a&gt; | sudo bash”. This will happen, even if you use a Chef Server. Therefore you would require a connection to download the Chef client binaries. &lt;/p&gt;
&lt;p&gt;This blog post demonstrates a chef run without an internet connection. Be aware, that we proof the basic setup only. Cookbooks may depend on external urls, but most of them allow attribute overrides to set custom urls.&lt;/p&gt;
&lt;h2 id=&quot;install-chef-without-internet&quot;&gt;Install Chef without internet&lt;/h2&gt;
&lt;p&gt;Depending on your operating system, &lt;a href=&quot;http://www.getchef.com/chef/install/&quot;&gt;Chef provides multiple platform dependent installer&lt;/a&gt;. E.g. for Ubuntu you could go with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/13.04/x86_64/chef_11.12.8-2_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This enables you to store the binaries on a local server within your internal network. Now, you need to transfer the package on a fresh system and you can install it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;
&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Chef install status:&quot;&lt;/span&gt;
dpkg-query &lt;span class=&quot;operator&quot;&gt;-l&lt;/span&gt; chef

&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Install Chef&quot;&lt;/span&gt;
dpkg -i chef_11.&lt;span class=&quot;number&quot;&gt;12.8&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;_amd64.deb

&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Chef install status:&quot;&lt;/span&gt;
dpkg-query &lt;span class=&quot;operator&quot;&gt;-l&lt;/span&gt; chef

&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Start chef run&quot;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# we use chef zero here (-z), if you use a chef server, this would work, too&lt;/span&gt;
chef-client -z -o chef-purge

&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Chef install status:&quot;&lt;/span&gt;
dpkg-query &lt;span class=&quot;operator&quot;&gt;-l&lt;/span&gt; chef
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This proofs that we are able to bootstrap a machine with a local chef binary. It would be amazing, if Chef Inc could provide apt and yum repositories. This would allow us to work with the standard operating system setup and we would be able to re-use existing package mirrors.&lt;/p&gt;
&lt;h1 id=&quot;uninstall-chef-with-chef&quot;&gt;Uninstall Chef with Chef&lt;/h1&gt;
&lt;p&gt;My customers often asked for a method to do a one-time install of &lt;a href=&quot;http://telekomlabs.github.io/&quot;&gt;hardening framework&lt;/a&gt;. In such a case it would be great, if we could remove the chef installer after the machine bootstrap.&lt;/p&gt;
&lt;p&gt;Now fun begins and we proof, that we are able to uninstall the chef binary with a chef cookbook:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;
&lt;span class=&quot;comment&quot;&gt;## Uninstall chef&lt;/span&gt;
package &lt;span class=&quot;string&quot;&gt;&quot;chef&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  action &lt;span class=&quot;symbol&quot;&gt;:purge&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The console output looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt; ∅&amp;gt; vagrant up
Bringing machine &lt;span class=&quot;string&quot;&gt;'core'&lt;/span&gt; up with &lt;span class=&quot;string&quot;&gt;'virtualbox'&lt;/span&gt; provider...
[core] VirtualBox VM is already running.
&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; ∅&amp;gt; vagrant provision
[core] Running provisioner: shell...
[core] Running: inline script
---&amp;gt; Chef install status:
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig&lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt;Wait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                             Version                           Description
+++-================================-=================================-==============================================================================
un  chef                             &amp;lt;none&amp;gt;                            (no description available)
Selecting previously unselected package chef.
(Reading database ... &lt;span class=&quot;number&quot;&gt;61149&lt;/span&gt; files and directories currently installed.)
Unpacking chef (from .../chef_11.&lt;span class=&quot;number&quot;&gt;12.8&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;_amd64.deb) ...
Setting up chef (&lt;span class=&quot;number&quot;&gt;11.12&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) ...
Thank you &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; installing Chef!
---&amp;gt; Chef install status:
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig&lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt;Wait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                             Version                           Description
+++-================================-=================================-==============================================================================
ii  chef                             &lt;span class=&quot;number&quot;&gt;11.12&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;                         The full stack of chef
---&amp;gt; Start chef run
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] WARN: No config file found or specified on command line, using command line options.
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Auto-discovered chef repository at /vagrant
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Starting chef-zero on port &lt;span class=&quot;number&quot;&gt;8889&lt;/span&gt; with repository at repository at /vagrant
  One version per cookbook

[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Forking chef instance to converge...
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] WARN: 
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
SSL validation of HTTPS requests is disabled. HTTPS connections are still
encrypted, but chef is not able to detect forged replies or man &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the middle
attacks.

To fix this issue add an entry like this to your configuration file:

``
  &lt;span class=&quot;comment&quot;&gt;# Verify all HTTPS connections (recommended)&lt;/span&gt;
  ssl_verify_mode :verify_peer

  &lt;span class=&quot;comment&quot;&gt;# OR, Verify only connections to chef-server&lt;/span&gt;
  verify_api_cert &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
``

To check your SSL configuration, or troubleshoot errors, you can use the
`knife ssl check` command like so:

``
  knife ssl check -c 
``

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: *** Chef &lt;span class=&quot;number&quot;&gt;11.12&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ***
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Chef-client pid: &lt;span class=&quot;number&quot;&gt;3311&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] WARN: Run List override has been provided.
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] WARN: Original Run List: []
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] WARN: Overridden Run List: [recipe[chef-purge]]
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Run List is [recipe[chef-purge]]
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Run List expands to [chef-purge]
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Starting Chef Run &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; vagrant-ubuntu-precise-&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Running start handlers
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Start handlers complete.
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: HTTP Request Returned &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt; Not Found : Object not found: /reports/nodes/vagrant-ubuntu-precise-&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;/runs
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Loading cookbooks [chef-purge@&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Processing file[/root/x.txt] action create (chef-purge::default line &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Processing package[chef] action purge (chef-purge::default line &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: package[chef] purged
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] WARN: Skipping final node save because override_runlist was given
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Chef Run complete &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.445303952&lt;/span&gt; seconds
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Running report handlers
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T17:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] INFO: Report handlers complete
---&amp;gt; Chef install status:
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig&lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt;Wait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                             Version                           Description
+++-================================-=================================-==============================================================================
un  chef                             &amp;lt;none&amp;gt;                            (no description available)
&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt; ∅&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is possible to install the Chef client without an internet connection, but unfortunately Chef is not available via normal package systems like apt and yum. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chef binaries can be un-installed with a Chef run&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The full demo is available at &lt;a href=&quot;https://github.com/chris-rock/chef-purge-demo/&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do you have better approaches for running Chef runs without internet? &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Get in touch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Applied Content Security Policy for Nginx and Nodejs</title>
      <link>http://chris-rock.github.io/articles/content-security-policy/</link>
      <pubDate>Mon, 18  Aug 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/content-security-policy/</guid>
      <author></author>
      <description>&lt;p&gt;Some years ago it was common that users deactivated JavaScript to reduce the security risk of their browser. Nowadays HTML5 (JavaScript, CSS in combination with AJAX) is required to provide superior user experience. Users have no chance to deactivate JavaScript and expect the same kind of quality. Web Developers (and I am for sure part of it) on the other hand just add a simple &lt;code&gt;noscript&lt;/code&gt; and think they are done. In most cases Web Developers live with the credo: “JavaScript is essential. There is no web without.”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;
    My Website does not support browsers without JavaScript disabled. 
    We promise we'll behave.
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not get me wrong. I love JavaScript, but I care about security, too. This simple requirement defined by the web developer changes one fact: &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Now, the web developer is responsible for the security of his JavaScript.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yes, he may behave. But what happens if the users do not behave? Just take a look at &lt;a href=&quot;https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet&quot;&gt;XSS Filter Evasion Cheat Sheet&lt;/a&gt;. In most cases some inline script is enough to try cross-site scripting attacks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;SCRIPT&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;XSS&quot;&lt;/span&gt;);&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;SCRIPT&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The web developer is responsible to ensure, that all data is parsed and hardened against scripting attacks. Are you doing this? In most cases this sounds easier than thought. Do you check every input field? Even on client-side web apps? Are you sure?&lt;/p&gt;
&lt;p&gt;To sum it up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need JavaScript activated&lt;/li&gt;
&lt;li&gt;User needs to trust the web developers&lt;/li&gt;
&lt;li&gt;Web Developer is responsible to ensure the security for his users&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Luckily there exists a solution that helps web developers to increase the security level of his web page: the HTTP &lt;code&gt;Content Security Policy&lt;/code&gt; header. And it is already supported by &lt;a href=&quot;http://caniuse.com/#feat=contentsecuritypolicy&quot;&gt;64% of the browsers&lt;/a&gt; and counting. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is Content Security Policy (CSP)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In general CSP is a white-list of sources that you trust as a web developer. Trust &lt;code&gt;Google Analytics&lt;/code&gt;? Then you add it to your white-list. Trust &lt;code&gt;Facebook&lt;/code&gt;? Add it to your white-list. Trust &lt;code&gt;https://evil.example.com&lt;/code&gt;? For sure not. Just do not add it to your white-list. Sounds not to complicated right? A more in-depth description is available at &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;HTML5 Rocks&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Following, I am going to focus on the practical setup of CSP. For example, you may require fonts and images with data URLs. Those are quite common and need to be separately activated. &lt;/p&gt;
&lt;p&gt;Activate images with data urls:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;img-src &amp;#39;self&amp;#39; data:;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same applies for fonts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;font-src &amp;#39;self&amp;#39; data:;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some JavaScripts frameworks depend a lot on inline css. If you require it (but please test without): &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;style-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are using cross-domain AJAX requests you need to to add the domain to the white-list, eg. for Google Analytics. Be aware that you still need to implement CORS or JSONP to retrieve the data properly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;connect-src &amp;#39;self&amp;#39; https://apis.google.com;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Under all circumstances never ever, really, do not activate inline-scripts &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# don&amp;#39;t do this
script-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39;;
# don&amp;#39;t do this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your code may require some changes and it takes some extra effort to create a JavaScript file even for simple code snippets. This extra effort drastically improves the security of your web page.&lt;/p&gt;
&lt;p&gt;The following section shows configuration examples of &lt;code&gt;Content Security Policy&lt;/code&gt; for Nginx and Nodejs. The same approach can be applied to other languages or web servers.&lt;/p&gt;
&lt;h3 id=&quot;nginx&quot;&gt;Nginx&lt;/h3&gt;
&lt;p&gt;If your are using Nginx, a simple one-liner is enough to add &lt;code&gt;Content Security Policy&lt;/code&gt;. Be aware that you need to test all edges of your web application after you activated this header. &lt;/p&gt;
&lt;p&gt;After the activation, the browser does not execute or display any content that is not allowed and this may break your web page.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Attention: Caching applies here to. At least Chrome uses a quite aggressive caching strategy for the CSP header. A simple page reload may not be enough to change the browser behavior.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A general good idea is to deactivate a much as possible and try to work out all issues. After you tried hard to fix all issues, start to relax the white-list. I’d like to repeat myself: &lt;em&gt;Under no circumstances activate Inline-JavaScript&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A practical Nginx setup could look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;server {
    listen 80;
    listen [::]:80 default_server ipv6only=on;

    location / {

        # you can tell the browser that it can only download content from the domains you explicitly allow
        add_header Content-Security-Policy &amp;quot;default-src &amp;#39;self&amp;#39;; script-src &amp;#39;self&amp;#39;; img-src &amp;#39;self&amp;#39; data:; style-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39;; font-src &amp;#39;self&amp;#39; data:; frame-src &amp;#39;self&amp;#39;; connect-src &amp;#39;self&amp;#39; https://apis.google.com; object-src &amp;#39;none&amp;#39; &amp;quot;;

        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;nodejs&quot;&gt;Nodejs&lt;/h3&gt;
&lt;p&gt;I’ll take Nodejs as an example for a web application, but the same can be applied to Ruby, Python, Scala etc.&lt;/p&gt;
&lt;p&gt;In general I see four possibilities for Content Security Policy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The web application is delivered with CSP already&lt;/li&gt;
&lt;li&gt;You use the web application behind a proxy&lt;/li&gt;
&lt;li&gt;Add the CSP header to your web framework like express&lt;/li&gt;
&lt;li&gt;Use a convenience library like helmet in Nodejs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If your applications falls under possibility #1, verify the white-list and get some cup of coffee. The #2 possibility can be easily implemented with the Nginx approach mentioned above.&lt;/p&gt;
&lt;p&gt;Now we deal with #3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var app = express();

app.get(&amp;#39;/&amp;#39;, function(req, res){
    res.send(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;hello world&amp;lt;script type=&amp;#39;text/javascript&amp;#39;&amp;gt;alert(&amp;#39;got you&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;html&amp;gt;&amp;quot;);
});

app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To run this file, save it under &lt;code&gt;example-01.js&lt;/code&gt;, run &lt;code&gt;npm install express&lt;/code&gt; and execute &lt;code&gt;node example-01.js&lt;/code&gt;. Open your browser at &lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/content-security-policy/xss01.png&quot; alt=&quot;Inline Javascript&quot; title=&quot;Inline Javascipt&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now we are going to activate the &lt;code&gt;Content Security Policy&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var app = express();

app.use(function(req, res, next){
    res.header(&amp;quot;Content-Security-Policy&amp;quot;, &amp;quot;default-src &amp;#39;self&amp;#39;;script-src &amp;#39;self&amp;#39;;object-src &amp;#39;none&amp;#39;;img-src &amp;#39;self&amp;#39;;media-src &amp;#39;self&amp;#39;;frame-src &amp;#39;none&amp;#39;;font-src &amp;#39;self&amp;#39; data:;connect-src &amp;#39;self&amp;#39;;style-src &amp;#39;self&amp;#39;&amp;quot;);
    next();
});

app.get(&amp;#39;/&amp;#39;, function(req, res){
    res.send(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;hello world&amp;lt;/p&amp;gt;&amp;lt;script type=&amp;#39;text/javascript&amp;#39;&amp;gt;alert(&amp;#39;got you&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;html&amp;gt;&amp;quot;);
});

app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try the sample again and you will receive an error code: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;Refused to execute inline script because it violates the following 
Content Security Policy directive: &amp;quot;script-src &amp;#39;self&amp;#39;&amp;quot;. Either the 
&amp;#39;unsafe-inline&amp;#39; keyword, a hash (&amp;#39;sha256-...&amp;#39;), or a nonce (&amp;#39;nonce-...&amp;#39;)
is required to enable inline execution.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/articles/content-security-policy/xss02.png&quot; alt=&quot;Alt text&quot; title=&quot;Horizon Dashboard Login&quot;&gt;&lt;/p&gt;
&lt;p&gt;For convenience, you may use a simple library called &lt;a href=&quot;https://www.npmjs.org/package/helmet&quot;&gt;helmet&lt;/a&gt;. It works as mentioned above, but the code is easier to read and helmet offers some more security headers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; helmet = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'helmet'&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// @see https://github.com/evilpacket/helmet&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// you should activate even more headers provided by helmet&lt;/span&gt;
app.use(helmet.csp({
    defaultSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    scriptSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    styleSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    imgSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    connectSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    fontSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    objectSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'none'&quot;&lt;/span&gt;],
    mediaSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    frameSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'none'&quot;&lt;/span&gt;],
    &lt;span class=&quot;comment&quot;&gt;// reportUri: '/report-violation',&lt;/span&gt;
    reportOnly: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// set to true if you only want to report errors&lt;/span&gt;
    setAllHeaders: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// set to true if you want to set all headers&lt;/span&gt;
    safari5: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// set to true if you want to force buggy CSP in Safari 5&lt;/span&gt;
}));


app.get(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt;{&lt;/span&gt;
    res.send(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;hello world&amp;lt;/p&amp;gt;&amp;lt;script type='text/javascript'&amp;gt;alert('got you')&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;html&amp;gt;&quot;&lt;/span&gt;);
});

app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;As I described above, &lt;code&gt;Content Security Policy&lt;/code&gt; is a good way to increase the security level of your web page. In most cases, the addition of the header is a no-brainer. You will have a few issues to work out and extensive testing is required after you activated the header. If you experience  lot of issues by implementing the &lt;code&gt;Content Security Policy&lt;/code&gt; this may be an indication that you have to do some clean up work. CSP does not prevent you from fixing your XSS-Bugs, but it helps you to reduce the potential risk of a XSS Bug. Of course CSP is not the only security feature for your web application and you should really invest some time to secure your web page.&lt;/p&gt;
&lt;p&gt;Do you need help to improve the security for your web application? &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Get in touch&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;An Introduction to Content Security Policy - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy&quot;&gt;Introducing Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Content_Security_Policy&quot;&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/CSP/&quot;&gt;Content Security Policy 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/CSP11/&quot;&gt;Content Security Policy Level 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://caniuse.com/#feat=contentsecuritypolicy&quot;&gt;Can I Use Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Asynchronous HTTP requests with Scala and Dispatch</title>
      <link>http://chris-rock.github.io/articles/scala-http-requests/</link>
      <pubDate>Mon, 11  Aug 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/scala-http-requests/</guid>
      <author></author>
      <description>&lt;p&gt;Today, we use REST APIs everywhere. Quite often this requires the implementation of SDKs for specific languages. If you are going to write a SDK or you need to call a REST backend without the availability of a SDK, you need a framework to send HTTP requests. The cool thing about Scala is the fact that it has native support for &lt;a href=&quot;http://docs.scala-lang.org/overviews/core/futures.html&quot;&gt;Futures (aka Promises)&lt;/a&gt;. By using futures, you simplify your life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the application does not block&lt;/li&gt;
&lt;li&gt;the application can handle more parallel requests&lt;/li&gt;
&lt;li&gt;you do not need a complex threading model&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Scala, &lt;a href=&quot;http://dispatch.databinder.net/Dispatch.html&quot;&gt;Dispatch&lt;/a&gt; is an asynchronous http library. Let’s do a simple request with Futures.&lt;/p&gt;
&lt;h2 id=&quot;plain-http-request&quot;&gt;Plain HTTP request&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; dispatch._, Defaults._
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scala.util.{Success, Failure}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DispatchTest&lt;/span&gt; {&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; main (args: Array[String]) {
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; svc = url(&lt;span class=&quot;string&quot;&gt;&quot;http://www.wikipedia.org/&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; response : Future[String] = Http(svc OK as.String)

    response onComplete {
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Success(content) =&amp;gt; {
        println(&lt;span class=&quot;string&quot;&gt;&quot;Successful response&quot;&lt;/span&gt; + content)
      }
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Failure(t) =&amp;gt; {
        println(&lt;span class=&quot;string&quot;&gt;&quot;An error has occurred: &quot;&lt;/span&gt; + t.getMessage)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;http-request-with-redirect&quot;&gt;HTTP request with redirect&lt;/h2&gt;
&lt;p&gt;It is common that HTTP endpoints use redirects. By default &lt;code&gt;Dispatch&lt;/code&gt; does not follow these redirects. You need to configure the Http instance to enable the redirect handling by using &lt;code&gt;Http.configure(_ setFollowRedirects true)(svc OK as.String)&lt;/code&gt;. The previous example with redirect looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; dispatch._, Defaults._
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scala.util.{Success, Failure}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DispatchTest&lt;/span&gt; {&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; main (args: Array[String]) {

    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; svc = url(&lt;span class=&quot;string&quot;&gt;&quot;http://www.wikipedia.com&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; response : Future[String] = Http.configure(_ setFollowRedirects &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)(svc OK as.String)

    response onComplete {
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Success(content) =&amp;gt; {
        println(&lt;span class=&quot;string&quot;&gt;&quot;Successful response&quot;&lt;/span&gt; + content)
      }
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Failure(t) =&amp;gt; {
        println(&lt;span class=&quot;string&quot;&gt;&quot;An error has occured: &quot;&lt;/span&gt; + t.getMessage)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;http-request-with-basic-authentication&quot;&gt;HTTP request with basic authentication&lt;/h2&gt;
&lt;p&gt;If you require basic authentication for your http requests, use &lt;code&gt;.as_!()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; svc = url(&lt;span class=&quot;string&quot;&gt;&quot;http://www.wikipedia.com&quot;&lt;/span&gt;).as_!(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;parse-json-response&quot;&gt;Parse JSON response&lt;/h2&gt;
&lt;p&gt;Nowadays nearly all REST endpoints use JSON responses. &lt;a href=&quot;http://argonaut.io/&quot;&gt;Argonaut&lt;/a&gt; is a Scala toolkit for HTTP handling. It uses many functional features of the Scala and integrates very well into the language.&lt;/p&gt;
&lt;p&gt;For quick parsing or where a predefined structure is not available, you can parse specific fields:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scalaz._, Scalaz._
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; argonaut._, Argonaut._

&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; json = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;
  { &quot;name&quot; : &quot;Toddler&quot;, &quot;age&quot; : 2, &quot;greeting&quot;: &quot;gurgle!&quot; }
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;// extract a simple field&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; greeting1: String =
Parse.parseWith(jsonString, _.field(&lt;span class=&quot;string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;).flatMap(_.string).getOrElse(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;), msg =&amp;gt; msg)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works very well at places where you have to deal with changing data structures. Quite often REST APIs deliver a well-defined structure, that can be used for parsing. Assume you get user data like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
  &quot;&lt;span class=&quot;attribute&quot;&gt;dn&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;uid=chris,ou=Users,dc=lollyrock,dc=com&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;attribute&quot;&gt;controls&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;[]&lt;/span&gt;,
  &quot;&lt;span class=&quot;attribute&quot;&gt;cn&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Chris Rock&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;attribute&quot;&gt;givenName&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Chris&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;attribute&quot;&gt;l&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Berlin&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;attribute&quot;&gt;mail&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;chris@lollyrock.com&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;attribute&quot;&gt;uid&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;chris&quot;&lt;/span&gt; &lt;/span&gt;,
  &quot;&lt;span class=&quot;attribute&quot;&gt;displayName&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;ch.hartmann&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;attribute&quot;&gt;o&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Rock Inc.&quot;&lt;/span&gt;
&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first we need a structure to store the parsed values. In Scala &lt;code&gt;Case Classes&lt;/code&gt; are perfect for this need:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(
   dn: String,
   cn: String,
   givenName: String,
   l: String,
   mail: String,
   displayName: String,
   o: String)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following example demonstrates the parsing of JSON data into a predefined case class.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import scalaz._, Scalaz._
import argonaut._, Argonaut._

// data structure, json will be converted into this class
case class User(
   dn: String,
   cn: String,
   givenName: String,
   l: String,
   mail: String,
   displayName: String,
   o: String)


object UserParser {

  // use the implicit json conversion of Argonaut
  // more information at http://argonaut.io/doc/parsing/
  implicit def UserCodecJson: CodecJson[User] =
    // the 9 represents the amount of arguments
    casecodec9(User.apply, User.unapply)(&amp;quot;dn&amp;quot;, &amp;quot;cn&amp;quot;, &amp;quot;givenName&amp;quot;,&amp;quot;l&amp;quot;, &amp;quot;mail&amp;quot;, &amp;quot;uid&amp;quot;, &amp;quot;displayName&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;plan&amp;quot;)

  // method to use argonaut parse
  def parse(data: String) : Option[User] = {
    Parse.decodeOption[User](data)
  }

  // simple app to test JSON parsing
  def main(args: Array[String]) {

    // json input data
    var jsonString =
      &amp;quot;&amp;quot;&amp;quot;
        | {&amp;quot;dn&amp;quot;:&amp;quot;uid=chris,ou=Users,dc=lollyrock,dc=com&amp;quot;,&amp;quot;controls&amp;quot;:[],&amp;quot;cn&amp;quot;:&amp;quot;Chris Rock&amp;quot;,&amp;quot;givenName&amp;quot;:&amp;quot;Chris&amp;quot;,&amp;quot;l&amp;quot;:&amp;quot;Berlin&amp;quot;,&amp;quot;mail&amp;quot;:&amp;quot;chris@lollyrock.com&amp;quot;,&amp;quot;uid&amp;quot;: &amp;quot;chris&amp;quot; ,&amp;quot;displayName&amp;quot;:&amp;quot;ch.hartmann&amp;quot;,&amp;quot;o&amp;quot;:&amp;quot;Rock Inc.&amp;quot;}
      &amp;quot;&amp;quot;&amp;quot;.stripMargin

    // parse json content
    val userdata: Option[User] = parse(jsonString)

    // print specific values
    val usr = userdata.get
    println (usr.dn)
    println (usr.displayName)

  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The combination of &lt;code&gt;Dispatch&lt;/code&gt; and &lt;code&gt;Argonout&lt;/code&gt; provides an efficient way to do HTTP calls and evaluate the response in Scala. Since we are using Futures, the environment can handle more requests at the same time and the code is easier to read than a complex threading system.&lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
&lt;p&gt;Chris &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Install OpenStack CLI on Ubuntu</title>
      <link>http://chris-rock.github.io/articles/install-openstack-cli/</link>
      <pubDate>Sun, 03  Aug 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/install-openstack-cli/</guid>
      <author></author>
      <description>&lt;p&gt;To setup the Open Stack Cli on a new server, you need to install Python 2.7 and the xml libraries. Once everything is prepared, the cli can be installed with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install OPENSTACKTOOL-novaclient
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;installation-on-ubuntu-14-04-lts&quot;&gt;Installation on Ubuntu 14.04 LTS&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Install dependencies to install nova and glance client&lt;/span&gt;
apt-get update
apt-get install -y python-pip
apt-get install -y build-essential
apt-get install -y python-dev libxslt1-dev libxml2-dev

&lt;span class=&quot;comment&quot;&gt;# Install the Open Stack Cli&lt;/span&gt;
pip install python-novaclient
pip install python-glanceclient
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, configure your environment variables for Open Stack. Since I use multiple tenants, I am going to create a new file for each tenant. eg. tenant1.sh:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tenant1.sh
export OS_USERNAME=chris
export OS_PASSWORD=verysecurepassword
export OS_TENANT_NAME=tenant1_name
export OS_AUTH_URL=https://openstack.example.com:5000/v2.0/
export OS_AUTH_STRATEGY=keystone
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this approach I am able to switch tenants quickly. Just &lt;code&gt;source tenant1.sh&lt;/code&gt; or execute the shell script directly. Test your setup with &lt;code&gt;nova list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To upload a new Ubuntu cloud image with &lt;code&gt;glance&lt;/code&gt;, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glance image-create --name &amp;#39;Ubuntu 12.04.4 LTS&amp;#39; \
  --container-format bare \
  --disk-format qcow2 \
  --is-public true \
  --copy-from http://uec-images.ubuntu.com/releases/12.04.4/release/ubuntu-12.04-server-cloudimg-amd64-disk1.img
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;installation-on-macos-x&quot;&gt;Installation on MacOS X&lt;/h1&gt;
&lt;p&gt;You need to install the following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/ftp/python/2.7.8/python-2.7.8-macosx10.6.dmg&quot;&gt;Python 2.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/download/mac&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I experienced issues with Python 2.7 shipped with Mac OS. Therefore I recommend the installation of the official version from the Python team.&lt;/p&gt;
&lt;p&gt;After the base packages are available, open the &lt;code&gt;Terminal&lt;/code&gt; and run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Install pip
curl --silent https://bootstrap.pypa.io/get-pip.py |sudo python2.7

# Install Open Stack Tools
pip install python-novaclient
pip install python-glanceclient
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Scalatra with Bearer Authentication</title>
      <link>http://chris-rock.github.io/articles/scalatra-bearer-authentication/</link>
      <pubDate>Sat, 26 Jul 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/scalatra-bearer-authentication/</guid>
      <author></author>
      <description>&lt;h1 id=&quot;why-use-scala-over-java-&quot;&gt;Why use Scala over Java?&lt;/h1&gt;
&lt;p&gt;After I experienced the beauty of Ruby and Node.js for web application development I thought there are not many use cases for developing a Java web application, because they provide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy definition of new routes&lt;/li&gt;
&lt;li&gt;stick to REST API with JSON&lt;/li&gt;
&lt;li&gt;quick development&lt;/li&gt;
&lt;li&gt;easy deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everything can be solved in Java, but it does not necessarily feels right. Java Enterprise Edition 5 and Spring try to make it as easy as possible, but Java has some disadvantages at language level, not on framework level:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;combination of imperative and functional approaches are quite helpful for writing more readable code and getting things done in a shorter time frame&lt;/li&gt;
&lt;li&gt;flexible type system, that is type safe and not verbose (Node.js and Ruby are not type safe)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/&quot;&gt;Promises for Javascript&lt;/a&gt; replace the concept of callbacks, ease the asynchronous development and establish a clean way to handle errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recently I worked on a project where I had the requirement to re-use an existing Java infrastructure. The nature of the existing infrastructure required the use of a JVM-based solution. It was the right time to try Scala and in particular &lt;a href=&quot;http://www.scalatra.org&quot;&gt;Scalatra&lt;/a&gt; because it is similar to &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; and &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt;. To get started with Scalatra try out these &lt;a href=&quot;https://github.com/scalatra/scalatra-website-examples&quot;&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use it with &lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt;, &lt;a href=&quot;http://blog.jetbrains.com/scala/2013/11/18/built-in-sbt-support-in-intellij-idea-13/&quot;&gt;IntelliJ Scala plugin&lt;/a&gt; and &lt;a href=&quot;https://github.com/mpeltonen/sbt-idea&quot;&gt;sbt-idea&lt;/a&gt;. If you are new to Scala you should also read the &lt;a href=&quot;http://www.scala-sbt.org/0.13/tutorial/index.html&quot;&gt;sbt guide&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;oauth-2-0-bearer-authentication-for-scalatra&quot;&gt;OAuth 2.0 Bearer Authentication for Scalatra&lt;/h1&gt;
&lt;p&gt;Once you have a sample Scalatra application up and running, you may want to build your REST API like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;get(&lt;span class=&quot;string&quot;&gt;&quot;/hello/:name&quot;&lt;/span&gt;) {
  &lt;span class=&quot;comment&quot;&gt;// Matches &quot;GET /hello/foo&quot; and &quot;GET /hello/bar&quot;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// params(&quot;name&quot;) is &quot;foo&quot; or &quot;bar&quot;&lt;/span&gt;
  &amp;lt;p&amp;gt;Hello, {params(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)}&amp;lt;/p&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the command-line requests I am going to use &lt;a href=&quot;http://chris-rock.github.io/articles/scalatra-bearer-authentication/httpie%20http://httpie.org&quot;&gt;httpie&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;http -v http://localhost:8080/hello/john

GET /hello/john HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate, compress
Host: localhost:8080
User-Agent: HTTPie/0.8.0



HTTP/1.1 200 OK
Content-Length: 18
Content-Type: text/html;charset=UTF-8
Server: Jetty(8.1.8.v20121106)

&amp;lt;p&amp;gt;Hello, john&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assume you need to restrict the access to routes. In a corporate environment an OAuth server is used quiet often to verify requests. &lt;a href=&quot;http://tools.ietf.org/html/rfc6750&quot;&gt;Bearer tokens&lt;/a&gt; are very useful for that task. The HTTP header for authentication is well established and used for basic authentication as well. Now the resource provider (our Scala server with routes) need to handle authentication header and verify the received token. &lt;/p&gt;
&lt;p&gt;Salesforce published &lt;a href=&quot;https://developer.salesforce.com/page/Digging_Deeper_into_OAuth_2.0_on_Force.com&quot;&gt;Digging Deeper into OAuth 2.0 on Force.com&lt;/a&gt; that illustrates the setup:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;OAuthRoles.png&quot; src=&quot;https://s3.amazonaws.com/dfc-wiki/en/images/6/6f/OAuthRoles.png&quot; width=&quot;443&quot; height=&quot;414&quot;&gt;&lt;/p&gt;
&lt;p&gt;A client request to the resource provider looks like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;http -v http://localhost:8080/hello/john &amp;#39;Authorization:Bearer Ieg4ahthie&amp;#39;

GET /hello/john HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate, compress
Authorization: Bearer Ieg4ahthie
Host: localhost:8080
User-Agent: HTTPie/0.8.0



HTTP/1.1 200 OK
Content-Length: 18
Content-Type: text/html;charset=UTF-8
Server: Jetty(8.1.8.v20121106)

&amp;lt;p&amp;gt;Hello, john&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the resource server needs to respect the authentication and only provide access to authenticated users. We need a way to implement a generic authentication strategy to authenticate users via Bearer token. Scalatra provides a way to &lt;a href=&quot;http://www.scalatra.org/2.3/guides/http/authentication.html&quot;&gt;hook your own authentication strategy&lt;/a&gt; into the framework. The implementation of the &lt;code&gt;BasicAuthStrategy&lt;/code&gt; is available at &lt;a href=&quot;https://github.com/scalatra/scalatra/blob/2.3.x/auth/src/main/scala/org/scalatra/auth/strategy/BasicAuthStrategy.scala&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Based on the BasicAuthStrategy, we are going to implement a &lt;code&gt;BearerAuthStragegy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;style type=&quot;text/css&quot;&gt;
.gist {
  font-size: 12px;
}
&lt;/style&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/9cc43202ecbd57ad1f4b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now you need to wire it into your Servlet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloAppStack&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; ScalatraServlet
  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; ScalateSupport
  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; CorsSupport
  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; AuthenticationSupport {
  ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you are able to secure routes with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;get(&lt;span class=&quot;string&quot;&gt;&quot;/hello/:name&quot;&lt;/span&gt;) {

    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; user: User = auth.get

    &lt;span class=&quot;comment&quot;&gt;// Matches &quot;GET /hello/foo&quot; and &quot;GET /hello/bar&quot;&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// params(&quot;name&quot;) is &quot;foo&quot; or &quot;bar&quot;&lt;/span&gt;
    &amp;lt;p&amp;gt;Hello, {params(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)}&amp;lt;/p&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally unauthenticated responses are rejected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;http -v http://localhost:8080/hello/john

GET /hello/john HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate, compress
Host: localhost:8080
User-Agent: HTTPie/0.8.0



HTTP/1.1 401 Unauthorized
Content-Length: 15
Content-Type: text/plain;charset=UTF-8
Server: Jetty(8.1.8.v20121106)

Unauthenticated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Transmitting the access token allows you to access the route as before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;
http -v http://localhost:8080/hello/john &amp;#39;Authorization:Bearer Ieg4ahthie&amp;#39;

GET /hello/john HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate, compress
Authorization: Bearer Ieg4ahthie
Host: localhost:8080
User-Agent: HTTPie/0.8.0



HTTP/1.1 200 OK
Content-Length: 18
Content-Type: text/html;charset=UTF-8
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Server: Jetty(8.1.8.v20121106)
Set-Cookie: JSESSIONID=1qxp4ot72v3lmr01n3vesosel;Path=/

&amp;lt;p&amp;gt;Hello, john&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example above requires you to implement the &lt;code&gt;verify&lt;/code&gt; method properly. The current state allows any request with any token access, as long as the token is provided. &lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;Chris&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How to harden a new server with Chef</title>
      <link>http://chris-rock.github.io/articles/how-to-harden-a-new-server/</link>
      <pubDate>Wed, 14 May 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/how-to-harden-a-new-server/</guid>
      <author></author>
      <description>&lt;p&gt;Deutsche Telekom developed scripts in Chef and Puppet to harden servers according to well-known guidelines like bettercrypto and internal guidelines at Deutsche Telekom. More information is available at the project page of the &lt;a href=&quot;http://telekomlabs.github.io/&quot;&gt;Hardening Framework&lt;/a&gt;. Disclosure: I am core developer at this project.&lt;/p&gt;
&lt;p&gt;Today we cook with &lt;a href=&quot;http://matschaffer.github.io/knife-solo/&quot;&gt;knife-solo&lt;/a&gt; and harden a fresh copy of Ubuntu 14.04. The process of hardening a server is quite difficult and takes a lot of knowledge and experience. Even the most-experienced administrators rely on guidelines to meet the best practices.&lt;/p&gt;
&lt;p&gt;Since we live in a cloud world by now, &lt;a href=&quot;http://arlimus.github.io/&quot;&gt;Dominik Richter&lt;/a&gt;, Patrick Meier and myself invented the &lt;code&gt;Hardening Framework&lt;/code&gt;. It is a set of cookbooks that help you to secure your server with well-known rules. &lt;/p&gt;
&lt;p&gt;The following steps illustrate the hardening process of a fresh server with nothing than a base Linux system.&lt;/p&gt;
&lt;p&gt;I assume you have &lt;a href=&quot;http://www.getchef.com/downloads/chef-dk/mac/&quot;&gt;Chef Development Kit&lt;/a&gt; or &lt;a href=&quot;http://www.getchef.com/chef/install/&quot;&gt;Chef&lt;/a&gt; and &lt;a href=&quot;http://berkshelf.com/&quot;&gt;Berkshelf&lt;/a&gt; on your machine.&lt;/p&gt;
&lt;p&gt;At first of all we need to install &lt;code&gt;knife-solo&lt;/code&gt; via &lt;code&gt;gem&lt;/code&gt; on your workstation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;∅&amp;gt; &lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; gem install knife-solo
Fetching: method_&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed method_&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
Fetching: slop-&lt;span class=&quot;number&quot;&gt;3.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed slop-&lt;span class=&quot;number&quot;&gt;3.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Fetching: coderay-&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed coderay-&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Fetching: pry-&lt;span class=&quot;number&quot;&gt;0.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.pre2.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed pry-&lt;span class=&quot;number&quot;&gt;0.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.pre2
Fetching: chef-zero-&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed chef-zero-&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
Fetching: diff-lcs-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed diff-lcs-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;
Fetching: highline-&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed highline-&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;
Fetching: net-ssh-gateway-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed net-ssh-gateway-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Fetching: net-ssh-multi-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed net-ssh-multi-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Fetching: mime-types-&lt;span class=&quot;number&quot;&gt;1.25&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed mime-types-&lt;span class=&quot;number&quot;&gt;1.25&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
Fetching: rest-client-&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;.rc1.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed rest-client-&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;.rc1
Fetching: ipaddress-&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed ipaddress-&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Fetching: mixlib-shellout-&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed mixlib-shellout-&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Fetching: mixlib-config-&lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed mixlib-config-&lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Fetching: mixlib-cli-&lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed mixlib-cli-&lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Fetching: systemu-&lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed systemu-&lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
Fetching: ohai-&lt;span class=&quot;number&quot;&gt;7.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed ohai-&lt;span class=&quot;number&quot;&gt;7.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;
Fetching: chef-&lt;span class=&quot;number&quot;&gt;11.14&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.alpha.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Successfully installed chef-&lt;span class=&quot;number&quot;&gt;11.14&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.alpha.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
Fetching: knife-solo-&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.gem (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%)
Thanks &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; installing knife-solo!

If you run into any issues please &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; us know at:
  https://github.com/matschaffer/knife-solo/issues

If you are upgrading knife-solo please uninstall any old versions by
running `gem clean knife-solo` to avoid any errors.

See http://bit.ly/CHEF-&lt;span class=&quot;number&quot;&gt;3255&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more information on the knife bug
that causes this.
Successfully installed knife-solo-&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; chef-&lt;span class=&quot;number&quot;&gt;11.14&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.alpha.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; chef-zero-&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
invalid options: -SNw2
(invalid options are ignored)
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; coderay-&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; diff-lcs-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; highline-&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ipaddress-&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; knife-solo-&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; method_&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mime-types-&lt;span class=&quot;number&quot;&gt;1.25&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mixlib-cli-&lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mixlib-config-&lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mixlib-shellout-&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; net-ssh-gateway-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; net-ssh-multi-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ohai-&lt;span class=&quot;number&quot;&gt;7.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pry-&lt;span class=&quot;number&quot;&gt;0.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.pre2
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; rest-client-&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;.rc1
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; slop-&lt;span class=&quot;number&quot;&gt;3.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; systemu-&lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt; gems installed
∅&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a next step we need to download the &lt;code&gt;hardening-kitchen&lt;/code&gt;. This comes with a set of hardening cookbooks and works out of the box. You’re free to extend the kitchen with your own cookbooks.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;git clone https://github.com/TelekomLabs/example-chef-hardening.git
&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; example-chef-hardening
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now, the workstation is ready and we are able to bootstrap our server with Chef and our hardening cookbooks.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;knife solo bootstrap ubuntu@hardening.tlabscloud.com nodes/default.json 
Bootstrapping Chef...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15934&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15934&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;21847&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:-- &lt;span class=&quot;number&quot;&gt;21857&lt;/span&gt;
Downloading Chef &lt;span class=&quot;number&quot;&gt;11.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ubuntu...
downloading https://www.opscode.com/chef/metadata?v=&lt;span class=&quot;number&quot;&gt;11.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;amp;prerelease=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;amp;nightlies=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;amp;p=ubuntu&amp;amp;pv=&lt;span class=&quot;number&quot;&gt;14.04&lt;/span&gt;&amp;amp;m=x86_64
  to file /tmp/install.sh.&lt;span class=&quot;number&quot;&gt;30630&lt;/span&gt;/metadata.txt
trying wget...
url https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/&lt;span class=&quot;number&quot;&gt;13.04&lt;/span&gt;/x86_64/chef_11.&lt;span class=&quot;number&quot;&gt;10.4&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.ubuntu.&lt;span class=&quot;number&quot;&gt;13.04&lt;/span&gt;_amd64.deb
md5 &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;e27eeaff3304df354e735a56005f04
sha256  &lt;span class=&quot;number&quot;&gt;98&lt;/span&gt;fc3ef27419ec45281306b160e5f1e736a9846ad9060a151046d5a29c49af6b
yolo    &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
downloaded metadata file looks valid...
downloading https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/&lt;span class=&quot;number&quot;&gt;13.04&lt;/span&gt;/x86_64/chef_11.&lt;span class=&quot;number&quot;&gt;10.4&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.ubuntu.&lt;span class=&quot;number&quot;&gt;13.04&lt;/span&gt;_amd64.deb
  to file /tmp/install.sh.&lt;span class=&quot;number&quot;&gt;30630&lt;/span&gt;/chef_11.&lt;span class=&quot;number&quot;&gt;10.4&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.ubuntu.&lt;span class=&quot;number&quot;&gt;13.04&lt;/span&gt;_amd64.deb
trying wget...
Comparing checksum with sha256sum...

WARNING: Chef-Client has not been regression tested on this O/S Distribution
WARNING: Do not use this configuration &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Production Applications.  Use at your own risk.

Installing Chef &lt;span class=&quot;number&quot;&gt;11.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;
installing with dpkg...
dpkg: warning: downgrading chef from &lt;span class=&quot;number&quot;&gt;11.12&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; to &lt;span class=&quot;number&quot;&gt;11.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.ubuntu.&lt;span class=&quot;number&quot;&gt;13.04&lt;/span&gt;
(Reading database ... &lt;span class=&quot;number&quot;&gt;62386&lt;/span&gt; files and directories currently installed.)
Preparing to unpack .../chef_11.&lt;span class=&quot;number&quot;&gt;10.4&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.ubuntu.&lt;span class=&quot;number&quot;&gt;13.04&lt;/span&gt;_amd64.deb ...
Unpacking chef (&lt;span class=&quot;number&quot;&gt;11.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.ubuntu.&lt;span class=&quot;number&quot;&gt;13.04&lt;/span&gt;) over (&lt;span class=&quot;number&quot;&gt;11.12&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) ...
Setting up chef (&lt;span class=&quot;number&quot;&gt;11.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.ubuntu.&lt;span class=&quot;number&quot;&gt;13.04&lt;/span&gt;) ...
Thank you &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; installing Chef!
Running Chef on hardening.tlabscloud.com...
Installing Berkshelf cookbooks to &lt;span class=&quot;string&quot;&gt;'cookbooks'&lt;/span&gt;...
Installing os-hardening (&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) from site: &lt;span class=&quot;string&quot;&gt;'http://cookbooks.opscode.com/api/v1/cookbooks'&lt;/span&gt;
Installing ssh-hardening (&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) from site: &lt;span class=&quot;string&quot;&gt;'http://cookbooks.opscode.com/api/v1/cookbooks'&lt;/span&gt;
Using sysctl (&lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)
Using ntp (&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)
Using apt (&lt;span class=&quot;number&quot;&gt;2.3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)
Using yum (&lt;span class=&quot;number&quot;&gt;2.4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)
Uploading the kitchen...
Generating solo config...
Running Chef...
Starting Chef Client, version &lt;span class=&quot;number&quot;&gt;11.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;05&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T14:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] WARN: unable to detect ip6address
Compiling Cookbooks...
[&lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;05&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;T14:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;] WARN: encrypted_data_bag_Secret is &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; but file does not exist. Unsetting
/home/ubuntu/chef-solo/cookbooks-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;/chef-solo-search/libraries/search.rb:&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;: warning: already initialized constant PARSER_LOADED

...

Chef Client finished, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;45&lt;/span&gt; resources updated &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4.206405118&lt;/span&gt; seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In less than 5 minutes, a new server is hardened for the core system and ssh. Be aware that your server still needs some configuration in order to be production ready. For that I recommend to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configure  your firewall properly&lt;/li&gt;
&lt;li&gt;Install  critical patches&lt;/li&gt;
&lt;li&gt;Use patch management&lt;/li&gt;
&lt;li&gt;Use system monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More information is available at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://telekomlabs.github.io/&quot;&gt;http://telekomlabs.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TelekomLabs/example-chef-hardening&quot;&gt;https://github.com/TelekomLabs/example-chef-hardening&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://community.opscode.com/cookbooks/os-hardening&quot;&gt;http://community.opscode.com/cookbooks/os-hardening&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://community.opscode.com/cookbooks/ssh-hardening&quot;&gt;http://community.opscode.com/cookbooks/ssh-hardening&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy Hardening!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>SHA 512 Hashs with nodejs</title>
      <link>http://chris-rock.github.io/articles/nodejs-sha512/</link>
      <pubDate>Sun, 06 Apr 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/nodejs-sha512/</guid>
      <author></author>
      <description>&lt;p&gt;Quite often you need to encrypt files. Recently I updated an application from encryption to &lt;a href=&quot;http://en.wikipedia.org/wiki/Authenticated_encryption&quot;&gt;authenticated encryption&lt;/a&gt; and used the encrypt-then-mac approach. &lt;/p&gt;
&lt;p&gt;To create a hash from strings you just need a few lines in nodejs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// generate a hash from string&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; crypto = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'crypto'&lt;/span&gt;),
        text = &lt;span class=&quot;string&quot;&gt;'hello bob'&lt;/span&gt;,
        key = &lt;span class=&quot;string&quot;&gt;'mysecret key'&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;// create hahs&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hash = crypto.createHmac(&lt;span class=&quot;string&quot;&gt;'sha512'&lt;/span&gt;, key)
    hash.update(text)
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = hash.digest(&lt;span class=&quot;string&quot;&gt;'hex'&lt;/span&gt;)

    &lt;span class=&quot;comment&quot;&gt;// print result&lt;/span&gt;
    console.log(value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The great thing about the nodejs implementation of &lt;code&gt;Hash&lt;/code&gt; is the possibility to stream data directly into the hash:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// generate a hash from file stream&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; crypto = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'crypto'&lt;/span&gt;),
        fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'fs'&lt;/span&gt;),
        key = &lt;span class=&quot;string&quot;&gt;'mysecret key'&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;// open file stream&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fstream = fs.createReadStream(&lt;span class=&quot;string&quot;&gt;'./test/hmac.js'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hash = crypto.createHash(&lt;span class=&quot;string&quot;&gt;'sha512'&lt;/span&gt;, key);
    hash.setEncoding(&lt;span class=&quot;string&quot;&gt;'hex'&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;// once the stream is done, we read the values&lt;/span&gt;
    fstream.on(&lt;span class=&quot;string&quot;&gt;'end'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        hash.end();
        &lt;span class=&quot;comment&quot;&gt;// print result&lt;/span&gt;
        console.log(hash.read());
    });

    &lt;span class=&quot;comment&quot;&gt;// pipe file to hash generator&lt;/span&gt;
    fstream.pipe(hash);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy Hashing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Open Stack Glance Image Create</title>
      <link>http://chris-rock.github.io/articles/glance-image-create/</link>
      <pubDate>Thu, 03 Apr 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/glance-image-create/</guid>
      <author></author>
      <description>&lt;p&gt;The newest version of Ubuntu is out and we need to upload the latest version to Open Stack. Of course we try to save our bandwith. There we use &lt;code&gt;-copy-from&lt;/code&gt; instead of &lt;code&gt;--file openstack_image.img&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glance image-create --name &amp;#39;Ubuntu 14.04 LTS&amp;#39; \
  --container-format bare \
  --disk-format qcow2 \
  --is-public true \
  --copy-from http://uec-images.ubuntu.com/releases/14.04/release/ubuntu-14.04-server-cloudimg-amd64-disk1.img


+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | None                                 |
| container_format | bare                                 |
| created_at       | 2014-04-02T13:16:20                  |
| deleted          | False                                |
| deleted_at       | None                                 |
| disk_format      | qcow2                                |
| id               | aa5ab6de-e461-4330-136e-fb149802bdc0 |
| is_public        | True                                 |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | Ubuntu 14.04 LTS Beta 1              |
| owner            | 9ab2f1a7ca521eee9c8de5a14567d377     |
| protected        | False                                |
| size             | 261095936                            |
| status           | queued                               |
| updated_at       | 2014-04-02T13:16:20                  |
+------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Open Stack VM Resizing</title>
      <link>http://chris-rock.github.io/articles/openstack-vm-resize/</link>
      <pubDate>Wed, 02 Apr 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/openstack-vm-resize/</guid>
      <author></author>
      <description>&lt;p&gt;Once in a while you need to upgrade a VM with more CPU or storage.&lt;/p&gt;
&lt;h2 id=&quot;step-1-vm-preparation&quot;&gt;Step 1: VM preparation&lt;/h2&gt;
&lt;p&gt;A normal VM running on Openstack is well prepared for flavor resizing. Our observations just brought up the network configuration as a central point of failure. Especially RedHat-based machines fix the network config in various files. e.g. for CentOS&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ensure the vm is properly prepared
rm /etc/udev/rules.d/70-persistent-net.rules 
touch /etc/udev/rules.d/70-persistent-net.rules

# remove hardware specific settings /etc/sysconfig/network-scripts
sed -i &amp;#39;/UUID/d&amp;#39; /etc/sysconfig/network-scripts/ifcfg-eth0
sed -i &amp;#39;/HWADDR/d&amp;#39; /etc/sysconfig/network-scripts/ifcfg-eth0
sed -i &amp;#39;/IPADDR/d&amp;#39; /etc/sysconfig/network-scripts/ifcfg-eth0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The vm is properly prepared by now.&lt;/p&gt;
&lt;h2 id=&quot;step-2-take-a-snapshot&quot;&gt;Step 2: Take a snapshot&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# create a snapshot and not down the image id
nova image-create $INSTANCEID $IMAGENAME
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;step-3-test-the-snapshot&quot;&gt;Step 3: Test the snapshot&lt;/h2&gt;
&lt;p&gt;Before we delete the old machine, we need to test the snapshot to ensure the network config is properly done and we are able to log into the new machine.&lt;/p&gt;
&lt;h2 id=&quot;step-4-gather-machine-details&quot;&gt;Step 4: Gather machine details&lt;/h2&gt;
&lt;p&gt;Now, we collect all the information of the existing instance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# show instance details
nova show $INSTANCEID

# display the network details (you need the id and the subnet id)
neutron net-list

# select the new flavor id
nova flavor-list
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;destroy-the-old-machine&quot;&gt;Destroy the old machine&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;nova delete $INSTANCEID
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;create-network-port&quot;&gt;Create network port&lt;/h2&gt;
&lt;p&gt;In some cases you need to keep the same ip adress. Neutron helps to assign a specific port with the new machine.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;neutron port-create --fixed-ip subnet_id=$SUBNET_ID,ip_address=$IP $NETWORK_ID
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;recreate-machine&quot;&gt;Recreate machine&lt;/h2&gt;
&lt;p&gt;Now we are ready to re-create the machine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
VMNAME=machine1
FLAVOR=4
IMAGE=63924226-e5ca-4ee6-a663-b2c89b0aa985
SG=ssh,http,default
PORT=f3999e60-9e53-4929-a9b2-ed3ab8ecf25d
KEYNAME=key
nova boot $VMNAME --flavor=$FLAVOR --image=$IMAGE --security-groups=$SG --nic port-id=$POST --key_name=$KEYNAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In case you do not use the specific port, switch &lt;code&gt;port-id&lt;/code&gt; with &lt;code&gt;net-id&lt;/code&gt; and the network id gathered with &lt;code&gt;neutron net-list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Happy resizing.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Havana Box</title>
      <link>http://chris-rock.github.io/articles/havana-box/</link>
      <pubDate>Mon, 28 Oct 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://chris-rock.github.io/articles/havana-box/</guid>
      <author></author>
      <description>&lt;center&gt;&lt;a href=&quot;http://www.flickr.com/photos/fixedgear/2998411614/&quot; title=&quot;Havana by fixedgear, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3161/2998411614_787b7717b2_q.jpg&quot; width=&quot;150px&quot; height=&quot;150px&quot; alt=&quot;Havana&quot; style=&quot;margin:0px&quot;&gt;&lt;/a&gt;&lt;/center&gt;



&lt;p&gt;&lt;a href=&quot;http://www.openstack.org/software/havana/&quot;&gt;OpenStack Havana&lt;/a&gt; has just been released. It offers a bunch of new features. Everything is well documented in their &lt;a href=&quot;https://wiki.openstack.org/wiki/ReleaseNotes/Havana&quot;&gt;Release Notes&lt;/a&gt;. It is nice to read, but I need a test drive.&lt;/p&gt;
&lt;p&gt;We are using Open Stack heavily and test new releases via &lt;a href=&quot;http://devstack.org/&quot;&gt;DevStack&lt;/a&gt; before we deploy new releases in our staging environment. What would be easier than trying Havana with a &lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;vagrant box&lt;/a&gt;. You find my vagrant setup at Github &lt;a href=&quot;https://github.com/chris-rock/vagrant-devstack&quot;&gt;https://github.com/chris-rock/vagrant-devstack&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/chris-rock/vagrant-devstack.git
Cloning into &amp;#39;vagrant-devstack&amp;#39;...
remote: Counting objects: 34, done.
remote: Compressing objects: 100% (19/19), done.
remote: Total 34 (delta 11), reused 34 (delta 11)
Unpacking objects: 100% (34/34), done.
Checking connectivity...done
$ cd vagrant-devstack
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a cup of tea you should have the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Horizon is now available at http://192.168.50.10/
Keystone is serving at http://192.168.50.10:5000/v2.0/
Examples on using novaclient command line is in exercise.sh
The default users are: admin and demo
The password: devstack
This is your host ip: 192.168.50.10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you type &lt;a href=&quot;http://192.168.50.10&quot;&gt;http://192.168.50.10&lt;/a&gt; in your browser and log into the OpenStack environment with &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;devstack&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/01_openstack_login.png&quot; alt=&quot;Alt text&quot; title=&quot;Horizon Dashboard Login&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then click on the project &lt;code&gt;demo&lt;/code&gt; or &lt;code&gt;admin&lt;/code&gt; on the left hand.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/02_openstack_dashboard.png&quot; alt=&quot;Alt text&quot; title=&quot;Dashboard&quot;&gt;&lt;/p&gt;
&lt;p&gt;Start creating your instance and select the Cirros OS as an image. Of course you could upload new images via&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; glance image-create --name YourImage --container-format ovf --disk-format qcow2 --file image_openstack_image.img --is-public True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/havana-box/03_openstack_createinstance.png&quot; alt=&quot;Alt text&quot; title=&quot;Optional title&quot;&gt;&lt;/p&gt;
&lt;p&gt;After your created the machine, the image will be spawned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/04_openstack_machines.png&quot; alt=&quot;Alt text&quot; title=&quot;Optional title&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the machine details and the console log to see the progress of the machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/05_openstack_machinedetail.png&quot; alt=&quot;Alt text&quot; title=&quot;Optional title&quot;&gt;&lt;/p&gt;
&lt;p&gt;Finally log into the machine via the NoVNC client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/06_openstack_runningmachine.png&quot; alt=&quot;Alt text&quot; title=&quot;Optional title&quot;&gt;&lt;/p&gt;
&lt;p&gt;In case you find bugs, I am happy to merge &lt;a href=&quot;https://github.com/chris-rock/vagrant-devstack&quot;&gt;pull requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chris-rock/vagrant-devstack&quot;&gt;&lt;img id=&quot;fork-me-ribbon&quot; src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>